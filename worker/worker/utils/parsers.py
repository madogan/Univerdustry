# -*- coding: utf-8 -*-"""Some parsing function for inputs."""from pandas.core.series import Seriesfrom worker.utils.validators import is_integer, is_valid_ip_addressdef parse_comma_separated_integers(s: str) -> list:    """Parse comma separated integers as list of integers.    Args:        s: Input string.    Returns:        :obj:`list` of :obj:`int`: Return list of integers or empty list.    """    try:        if not isinstance(s, str) or s.strip() == "":            return list()        return [int(i.replace(",", "")) for i in s.split(",")]    except Exception:        return list()def parse_device_excel_row(r: Series) -> dict:    """Parse device import excel row to dict.    It also has some validation for values.    Args:        r: Row of excel.    Returns:        :obj:`dict`: Parsed row as dict or failure messages in dict                     with operation status.    """    device_name = str(r.get("device_name", "")).strip()    device_ip = str(r.get("device_ip", "")).strip()    device_os_type = str(r.get("device_os_type", "")).lower().strip()    device_type = str(r.get("device_type", "")).lower().strip()    device_model = str(r.get("device_model", "")).strip()    ssh_port = str(r.get("ssh_port", "22")).strip()    telnet_port = str(r.get("telnet_port", "23")).strip()    use_telnet = str(r.get("use_telnet", "")).lower().strip()    serial_number = str(r.get("serial_number", "")).strip()    location = str(r.get("location", "")).strip()    username = str(r.get("username", ""))    password = str(r.get("password", ""))    enable_password = str(r.get("enable_password", ""))    # Validate `use_telnet` col.    if use_telnet in ["t", "true", "doÄŸru", "dogru", "1"]:        use_telnet = True    else:        use_telnet = False    # Validate `ssh_port` col.    if not (is_integer(ssh_port) and 0 < int(ssh_port) < 65536):        return {"status": "failure", "message_index": "wrong_ssh_port"}    else:        ssh_port = int(ssh_port)    # Validate `telnet_port` col.    if not (is_integer(telnet_port) and 0 < int(telnet_port) < 65536):        if str(telnet_port).strip() in ["", "nan", "none"]:            telnet_port = None        else:            telnet_port = -1    else:        telnet_port = int(telnet_port)    # Convert to dictionary.    result_dict = {        "device_name": device_name,        "device_ip": device_ip,        "device_os_type": device_os_type,        "device_type": device_type,        "device_model": device_model,        "ssh_port": ssh_port,        "telnet_port": telnet_port,        "use_telnet": use_telnet,        "serial_number": serial_number,        "location": location,        "username": username,        "password": password,        "enable_password": enable_password    }    # List of required fields for a row.    required_fields = [        "device_name", "device_ip", "device_os_type", "device_type",        "ssh_port", "username", "password"    ]    # Convert empty or invalid values to `None`.    for key, val in result_dict.items():        if str(val).lower().strip() in ["", "nan", "none"]:            result_dict[key] = None            # If empty key is in required field return parsing error.            if key in required_fields:                return {"status": "failure",                        "message_index": "required_field_error",                        "col": key}    # Validate ip address.    if is_valid_ip_address(device_ip) is False:        return {"status": "failure", "message_index": "wrong_ip_format"}    from worker.database.models import DeviceOsType, DeviceType    # Get expected :Device:`device_type` values.    types = DeviceType.distinct()    # Get expected :Device:`device_os_type` values.    os_types = DeviceOsType.distinct()    # Validate :Device:`device_type`.    if device_type not in types:        return {"status": "failure", "message_index": "wrong_device_type"}    # Validate :Device:`device_os_type`.    if device_os_type not in os_types:        return {"status": "failure", "message_index": "wrong_device_os_type"}    # Return ok, and parsed dictionary of given row.    return {"status": "ok", "row": result_dict}
import datetimefrom _md5 import md5from scholarly import search_authorfrom application import celery, loggerfrom application.rests.mongo import find_one, insert_one, update_onefrom application.tasks.download_pdf import task_download_pdffrom application.utils.decorators import celery_exception_handler@celery.task(bind=True, name="scrape_publications_of_author", max_retries=3)@celery_exception_handler(ConnectionError)def task_scrape_publications_of_author(self, author):    resd = {"status": "ok"}    try:        author_info = next(search_author(author["name"])).fill()    except StopIteration:        logger.info(f'Author ({author["name"]}) not found.')        resd["status"] = "failure"        resd["failure_detail"] = "Author not found."        return resd    if not author_info:        logger.info(f'Author ({author["name"]}) not found.')        resd["status"] = "failure"        resd["failure_detail"] = "Author not found."        return resd    logger.info(f'Author({author["name"]}) found.')    counter = 1    for publication in author_info.publications:        publication = publication.fill().__dict__        publication["id"] = publication["id_citations"]        publication.pop("id_citations")        publication.pop("_filled")        publication.pop("source")        title = publication["bib"].get("title", f'unknown_publication_name_'                                                f'{counter}')        publication["name"] = md5(title.encode("utf-8")).hexdigest()        publication = {**publication, **publication.pop("bib")}        pub_in_mongo = find_one(            "author",            {                "filter": {                    "id": {                        "$eq": publication["id"]                    }                }            }        )        if pub_in_mongo:            update_one(                "publication",                {                    "filter": {                        "id": {                            "$eq": publication["id"]                        }                    },                    "update": {"$addToSet": {"authors": author["id"]}}                }            )            logger.info(f'Pub is updated!')        else:            publication["created_at"] = \                datetime.datetime.now().isoformat()            publication["authors"] = [author["id"]]            result = insert_one("publication", publication)            if result is not None:                logger.info(f'"{publication["name"]}" is inserted!')            logger.info(f'Pub is inserted!')        update_one(            "author",            {                "filter": {                    "id": {"$eq": author["id"]}                },                "update": {                    "$addToSet": {                        "publications": publication["id"]                    }                }            }        )        task_download_pdf.apply_async(            (publication["id"], publication.get("eprint", None))        )        counter += 1    resd["num_publications"] = counter    return resd
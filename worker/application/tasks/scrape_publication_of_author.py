import datetimefrom application import celery, loggerfrom application.rests.mongo import find_one, insert_one, update_onefrom application.rests.scholar import get_author_of_publicationsfrom application.tasks.download_pdf import task_download_pdf@celery.task(bind=True, name="scrape_publication_of_author")def task_scrape_publication_of_author(self, author):    resd = {"status": "ok"}    try:        publications = get_author_of_publications(author["name"])        len_publications = len(publications)        resd["num_publications"] = len_publications        if not publications:            return resd        logger.info(f'{len_publications} pubs found!')        for publication in publications:            pub_in_mongo = find_one(                "author",                {                    "filter": {                        "id_citations": {                            "$eq": publication["id_citations"]                        }                    }                }            )            if pub_in_mongo:                update_one(                    "publication",                    {                        "filter": {                            "id_citations": {                                "$eq": publication["id_citations"]                            }                        },                        "update": {"$addToSet": {"authors": author["id"]}}                    }                )                logger.info(f'Pub is updated!')            else:                publication["created_at"] = \                    datetime.datetime.now().isoformat()                publication["authors"] = [author["id"]]                result = insert_one("publication", publication)                if result is not None:                    logger.info(f'"{publication["name"]}" is inserted!')                logger.info(f'Pub is insered!')            update_one(                "author",                {                    "filter": {                        "id": {"$eq": author["id"]}                    },                    "update": {                        "$addToSet": {                            "publications": publication["id_citations"]                        }                    }                }            )            eprint = publication["bib"].get("eprint", None)            if eprint is not None:                task_download_pdf.apply_async(                    (publication["id_citations"], eprint)                )    except Exception as e:        logger.exception(e)        resd["status"] = "failure"        resd["detail"] = str(e)    return resd
import base64import osfrom _md5 import md5import requestsfrom application import celery, loggerfrom application.rests.mongo import update_onefrom application.tasks.add_to_elasticsearch import task_add_to_elasticsearchfrom application.utils.helpers import get_config, extract_text_from_pdf@celery.task(bind=True, name="download_pdf")def task_download_pdf(self, pub_id: str, url: str):    resd = {"status": "ok"}    if not url:        return resd    files_path = get_config("FILES_PATH")    file_name = md5(url.encode("utf-8")).hexdigest()    if not os.path.exists(files_path):        os.makedirs(files_path)    pdf_raw = requests.get(url).content    full_path = f'{files_path}{os.path.sep}{file_name}.pdf'    with open(full_path, "wb+") as f:        f.write(pdf_raw)    resd["path"] = full_path    try:        content = extract_text_from_pdf(full_path)    except Exception as e:        resd["extraction_failure"] = str(e)        logger.debug(e)        content = None    result = update_one(        "publication",        {            "filter": {                "id": {"$eq": pub_id}            },            "update": {                "$set": {                    "raw_base64": base64.encodebytes(pdf_raw).decode("utf-8"),                    "content": content                }            },            "upsert": True        }    )    if result is not None:        logger.info(f'Content is added to publication.')    task_add_to_elasticsearch.apply_async((pub_id,))    return resd
import base64import requestsfrom application import celery, loggerfrom application.utils.helpers import get_configfrom application.rests.mongo import update_one, find, count_documnetsfrom application.utils.decorators import celery_exception_handler@celery.task(bind=True, name="pdf_extraction", max_retries=3)@celery_exception_handler(ConnectionError)def t_pdf_extraction(self):    resd = {"status": "ok"}    count = count_documnets("publication", {        "filter": {"raw_base64": {"$exists": True}}    })    logger.info(f'Starting PDF Extraction Task!')    logger.info(f'Document Count: {count}')    for i in range(0, count, 10):        logger.info(f'Processed: {i}/{count}')        pubs = find("publication", {            "filter": {"raw_base64": {"$exists": True}},            "projection": ["id", "raw_base64"], "skip": i, "limit": 10        })        for pub in pubs:            logger.info(f'Pub({pub["id"]})')            raw_base64 = pub.get("raw_base64", None)            if raw_base64:                raw = base64.decodebytes(raw_base64.encode("utf-8"))                try:                    content = requests.put(                        get_config("APACHE_TIKA") + "/tika",                        data=raw, headers={"Content-type": "application/pdf"}                    ).text                    accepted_chars = \                        "qwertyuıopğüasdfghjklşizxcvbnmöçQWERTYUIOP" \                        "ĞÜASDFGHJKLŞİZXCVBNMÖÇ.?! "                    content = "".join([c for c in content if c in accepted_chars])                    content = content.replace(" .", ". ")                    content = content.replace("?", " ? ")                    content = content.replace("!", " ! ")                    content = " ".join(content.split())                except Exception as e:                    resd["extraction_failure"] = str(e)                    logger.debug(e)                    content = None                update_one("publication", {                    "filter": {"id": {"$eq": pub["id"]}},                    "update": {"$set": {"content": content}},                    "upsert": True                })    return resd
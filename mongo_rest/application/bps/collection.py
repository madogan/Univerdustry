# -*- coding: utf-8 -*-"""Endpoints of CRUD operations."""from flask import Blueprint, requestfrom application import db, loggerfrom application.utils.decorators import json_responsebp_collection = Blueprint("bp_collection", __name__)@bp_collection.route("/<string:collection_name>/insert/one", methods=["POST"])@json_responsedef insert_one(collection_name: str):    try:        result = db[collection_name].insert_one(**request.json)        result = {"acknowledged": result.acknowledged,                  "inserted_id": result.inserted_id}                return {"status": "ok", "result": result}    except Exception as e:        logger.error(e)        return {"status": "failure", "detail": str(e), "result": None}@bp_collection.route("/<string:collection_name>/insert/many", methods=["POST"])@json_responsedef insert_many(collection_name: str):    try:        result = db[collection_name].insert_many(**request.json)        result = {"acknowledged": result.acknowledged,                  "inserted_ids": result.inserted_ids}        return {"status": "ok", "result": result}    except Exception as e:        logger.error(e)        return {"status": "failure", "detail": str(e), "result": None}@bp_collection.route("/<string:collection_name>/replace/one", methods=["PUT"])@json_responsedef replace_one(collection_name: str):    try:        result = db[collection_name].replace_one(**request.json)        result = {            "acknowledged": result.acknowledged,            "matched_count": result.matched_count,            "modified_count": result.modified_count,            "raw_result": result.raw_result,            "upserted_id": result.upserted_id        }        return {"status": "ok", "result": result}    except Exception as e:        logger.error(e)        return {"status": "failure", "detail": str(e), "result": None}@bp_collection.route("/<string:collection_name>/update/one", methods=["PATCH"])@json_responsedef update_one(collection_name: str):    try:        result = db[collection_name].update_one(**request.json)        result = {            "acknowledged": result.acknowledged,            "matched_count": result.matched_count,            "modified_count": result.modified_count,            "raw_result": result.raw_result,            "upserted_id": result.upserted_id        }        return {"status": "ok", "result": result}    except Exception as e:        logger.error(e)        return {"status": "failure", "detail": str(e), "result": None}@bp_collection.route("/<string:collection_name>/update/many", methods=["PATCH"])@json_responsedef update_many(collection_name: str):    try:        result = db[collection_name].update_many(**request.json)        result = {            "acknowledged": result.acknowledged,            "matched_count": result.matched_count,            "modified_count": result.modified_count,            "raw_result": result.raw_result,            "upserted_id": result.upserted_id        }        return {"status": "ok", "result": result}    except Exception as e:        logger.error(e)        return {"status": "failure", "detail": str(e), "result": None}@bp_collection.route("/<string:collection_name>/delete/one", methods=["DELETE"])@json_responsedef delete_one(collection_name: str):    try:        result = db[collection_name].delete_one(**request.json)        result = {            "acknowledged": result.acknowledged,            "deleted_count": result.deleted_count,            "raw_result": result.raw_result        }        return {"status": "ok", "result": result}    except Exception as e:        logger.error(e)        return {"status": "failure", "detail": str(e), "result": None}@bp_collection.route("/<string:collection_name>/delete/many", methods=["DELETE"])@json_responsedef delete_many(collection_name: str):    try:        result = db[collection_name].delete_many(**request.json)        result = {            "acknowledged": result.acknowledged,            "deleted_count": result.deleted_count,            "raw_result": result.raw_result        }        return {"status": "ok", "result": result}    except Exception as e:        logger.error(e)        return {"status": "failure", "detail": str(e), "result": None}@bp_collection.route("/<string:collection_name>/find", methods=["GET"])@json_responsedef find(collection_name: str):    try:        result = db[collection_name].find(**request.json)        return {"status": "ok", "result": result}    except Exception as e:        logger.error(e)        return {"status": "failure", "detail": str(e), "result": None}@bp_collection.route("/<string:collection_name>/find/raw/batches", methods=["GET"])@json_responsedef find_raw_batches(collection_name: str):    try:        result = db[collection_name].find_raw_batches(**request.json)        return {"status": "ok", "result": result}    except Exception as e:        logger.error(e)        return {"status": "failure", "detail": str(e), "result": None}@bp_collection.route("/<string:collection_name>/find/one", methods=["GET"])@json_responsedef find_one(collection_name: str):    try:        result = db[collection_name].find_one(**request.json)        return {"status": "ok", "result": result}    except Exception as e:        logger.error(e)        return {"status": "failure", "detail": str(e), "result": None}@bp_collection.route("/<string:collection_name>/find/delete/one", methods=["GET"])@json_responsedef find_one_and_delete(collection_name: str):    try:        result = db[collection_name].find_one_and_delete(**request.json)        return {"status": "ok", "result": result}    except Exception as e:        logger.error(e)        return {"status": "failure", "detail": str(e), "result": None}@bp_collection.route("/<string:collection_name>/find/replace/one", methods=["GET"])@json_responsedef find_one_and_replace(collection_name: str):    try:        result = db[collection_name].find_one_and_replace(**request.json)        return {"status": "ok", "result": result}    except Exception as e:        logger.error(e)        return {"status": "failure", "detail": str(e), "result": None}@bp_collection.route("/<string:collection_name>/find/update/one", methods=["GET"])@json_responsedef find_one_and_update(collection_name: str):    try:        result = db[collection_name].find_one_and_update(**request.json)        return {"status": "ok", "result": result}    except Exception as e:        logger.error(e)        return {"status": "failure", "detail": str(e), "result": None}@bp_collection.route("/<string:collection_name>/count/documents", methods=["GET"])@json_responsedef count_documents(collection_name: str):    try:        result = db[collection_name].count_documents(**request.json)        return {"status": "ok", "result": result}    except Exception as e:        logger.error(e)        return {"status": "failure", "detail": str(e), "result": None}@bp_collection.route("/<string:collection_name>/distinct", methods=["GET"])@json_responsedef distinct(collection_name: str):    try:        result = db[collection_name].distinct(**request.json)        return {"status": "ok", "result": result}    except Exception as e:        logger.error(e)        return {"status": "failure", "detail": str(e), "result": None}@bp_collection.route("/<string:collection_name>/create/index", methods=["POST"])@json_responsedef create_index(collection_name: str):    try:        result = db[collection_name].create_index(**request.json)        return {"status": "ok", "result": result}    except Exception as e:        logger.error(e)        return {"status": "failure", "detail": str(e), "result": None}
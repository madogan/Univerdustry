import jsonfrom collections import dequeclass AutoSortedDict:    def __init__(self, sort_field):        self.count = 0        self.keys = deque()        self.items = deque()        self.indices = dict()        self.sort_field = sort_field    def __setitem__(self, key, item):        current_index = self.indices.get(key, -1)        # if current_index == -1 then it means 'key' does not exist        suitable_index = 0        if self.count > 0:            ok = False            for i in range(self.count):                if self.items[i][self.sort_field] <= item[self.sort_field]:                    if ok is False:                        suitable_index = i                        ok = True                    else:                        self.indices[self.keys[i]] += 1            if ok is False:                suitable_index = self.count        self.indices[key] = suitable_index        if current_index != -1:            del self.keys[current_index]            del self.items[current_index]        else:            self.count += 1        self.keys.insert(suitable_index, key)        self.items.insert(suitable_index, item)        if suitable_index == 0:            for i in range(1, self.count):                self.indices[self.keys[i]] = i    def __getitem__(self, key):        index = self.indices.get(key, -1)        if index == -1:            return None        else:            return self.items[index]    def __getattr__(self, key):        index = self.indices.get(key, -1)        if index == -1:            return None        else:            return self.items[index]    def __delitem__(self, key):        index = self.indices.get(key, -1)        if index != -1:            self.indices.pop(key)            del self.keys[index]            del self.items[index]            self.count -= 1            for i in range(0, self.count):                self.indices[self.keys[i]] = i    def __contains__(self, item):        return self.indices.get(item, -1) != -1    def __repr__(self):        return "\n".join([f'{self.keys[i]}: {self.items[i]}' for i in                          range(self.count)])    def get(self, key, default):        index = self.indices.get(key, -1)        if index == -1:            return default        else:            return self.items[index]    def values(self):        return [self.items[i] for i in range(self.count)]    def json(self):        result = dict()        for i in range(self.count):            result[self.keys[i]] = self.items[i]        return resultif __name__ == '__main__':    with open("pubs.json", "rt", encoding="utf-8") as fp:        pubs = json.load(fp)    authors = AutoSortedDict(sort_field="score")    author_count, pub_count = 0, 0    for pub in pubs:        pub_count += 1        pub.pop("_index")        pub_authors = pub["_source"].get("authors", list())        for pub_author in pub_authors:            author_id = pub_author.pop("id")            if authors.get(author_id, None) is not None:                current_author = authors[author_id]                del authors[author_id]                current_author["pub_counts"] += 1                current_author["score"] += pub["_score"]                current_author["pubs"].append({                    "id": pub["_id"], "title": pub["_source"]["title"]                })                authors[author_id] = current_author            else:                author_count += 1                pub_author["score"] = pub["_score"]                pub_author["pubs"] = [{                    "id": pub["_id"], "title": pub["_source"]["title"]                }]                pub_author["pub_counts"] = 1                authors[author_id] = pub_author        print(f' > '.join([str(x["score"])[:5] for x in authors.items]))
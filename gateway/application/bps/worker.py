from application import loggerfrom flask import Blueprint, jsonifyfrom application.rests.mongo import findfrom application.rests.worker import start_taskbp_worker = Blueprint("bp_task", __name__,                      url_prefix="/worker")@bp_worker.route("/update/vectors", methods=["GET"])def update_vectors():    resd = {"status": "ok"}    pubs = find("publication")    results = list()    for pub in pubs:        results.append(            {                "pub_id": pub["id"],                **start_task("elasticsearch_indexing", args=[pub["id"]])            }        )    resd["results"] = results    return jsonify(resd)@bp_worker.route("/update/contents", methods=["GET"])def update_contents():    resd = {"status": "ok"}    pubs = find("publication", {        "projection": {"id": 1, "title": 1, "authors": 1, "eprint": 1}    })    results = list()    try:        for pub in pubs:            args = [pub["id"], pub["title"], pub["authors"], pub.get(                "eprint", None)]            results.append(                {                    "pub_id": pub["id"],                    **start_task("find_pdf_primarily", args=args)                }            )    except Exception as e:        logger.exception(e)        resd["status"] = "failure"        resd["detail"] = str(e)    resd["results"] = results    return jsonify(resd)@bp_worker.route("/update/es", methods=["GET"])def update_es():    resd = {"status": "ok"}    pubs = find("publication", {        "projection": {"id": 1}    })    results = list()    try:        for pub in pubs:            results.append(                {                    "pub_id": pub["id"],                    **start_task("elasticsearch_indexing", args=[pub["id"]])                }            )    except Exception as e:        logger.exception(e)        resd["status"] = "failure"        resd["detail"] = str(e)    resd["results"] = results    return jsonify(resd)
# -*- coding: utf-8 -*-"""Endpoints of CRUD operations."""from flask import Blueprint, jsonify, requestfrom sqlalchemy import desc, ascfrom werkzeug.exceptions import NotFoundfrom worker import logger, dbfrom worker.database.models import model_tablefrom worker.utils.parsers import parse_comma_separated_stringsbp_api = Blueprint("bp_api", __name__)@bp_api.route("/<string:resource>", methods=["GET"])@bp_api.route("/<string:resource>/<list:pkeys>", methods=["GET"])def resource_get(resource: str, pkeys: str = None):    try:        resource_class = model_table.get(resource, None)        if resource_class is None:            raise NotFound(description=f'{resource}_not_found')        args = request.args        # Select columns.        columns = None        if args.get("select", None):            if args["select"] == "*":                columns = resource_class.get_columns()            else:                columns = parse_comma_separated_strings(args["select"])        if not columns:            columns = resource_class.get_columns()        #######################################################################        query = db.session.query(columns)        # Ordering.        # order=age.asc,height.desc        if args.get("order", None):            orders = parse_comma_separated_strings(args["order"])            for order in orders:                order = order.split(".")                col = getattr(resource_class, order[0])                if order[1] == "desc":                    query = query.order_by(desc(col))                if order[1] == "asc":                    query = query.order_by(asc(col))        if pkeys:            query = query.filter(resource_class.ident.in_(pkeys))        qr = query.all()        return jsonify({"status": "ok", "result": qr})    except Exception as e:        logger.exception(e)        return jsonify({"status": "failure", "detail": str(e)})@bp_api.route("/<string:resource>", methods=["POST"])def resource_post(resource: str):    try:        resource_class = model_table.get(resource, None)        if resource_class is None:            raise NotFound(description=f'{resource}_not_found')        data = request.json        if isinstance(data, dict):            data = [data]        if isinstance(data, list):            for item in data:                resource_instance = resource_class(**item)                resource_instance.save()        return jsonify({"status": "ok"})    except Exception as e:        logger.exception(e)        return jsonify({"status": "failure", "detail": str(e)})@bp_api.route("/<string:resource>", methods=["PUT"])def resource_put(resource: str):    try:        resource_class = model_table.get(resource, None)        if resource_class is None:            raise NotFound(description=f'{resource}_not_found')        data = request.json        if isinstance(data, dict):            data = [data]        if isinstance(data, list):            for item in data:                resource_class.update(item["ident"], item, commit=False)        db.session.commit()        return jsonify({"status": "ok"})    except Exception as e:        logger.exception(e)        return jsonify({"status": "failure", "detail": str(e)})@bp_api.route("/<string:resource>/<list:pkeys>", methods=["DELETE"])def resource_delete(resource: str, pkeys: str = None):    try:        resource_class = model_table.get(resource, None)        if resource_class is None:            raise NotFound(description=f'{resource}_not_found')        query = db.session.query(resource_class)        if pkeys:            query = query.filter(resource_class.ident.in_(pkeys))        qr = query.all()        for item in qr:            item.delete(commit=False)        db.session.commit()        return jsonify({"status": "ok"})    except Exception as e:        logger.exception(e)        return jsonify({"status": "failure", "detail": str(e)})
# -*- coding: utf-8 -*-"""This module consists several necessary function independently."""from flask import _app_ctx_stack, has_app_contextdef ensure_app_context(function):    """Decorator function to make sure a function works in app context.    Args:        function: A function that will be wrapped with context.    """    def wrapper(*args, **kwargs):        """Decorate function here.        Args:            *args: Arguments of the function.            **kwargs: Keyword arguments of the function.        Returns:            :obj:`function`: Wrapped function.        """        is_pushed = push_app_context_if_has_not_app_context()        return_value = function(*args, **kwargs)        pop_app_context_if_pushed(is_pushed)        return return_value    # To avoid naming conflicts.    wrapper.__name__ = function.__name__    return wrapperdef push_app_context_if_has_not_app_context() -> [bool, None]:    """Check app context and push an app context manually."""    if not has_app_context():        # If out of app context, push app context.        from scholar_rest import app        ctx = app.app_context()        ctx.push()        return Truedef pop_app_context_if_pushed(is_pushed: bool) -> None:    """Pop app context if pushed    Arguments:        is_pushed: If it is True, pop app context from stack.    """    if is_pushed is True:        from scholar_rest import app        ctx = app.app_context()        if ctx == _app_ctx_stack.top:            ctx.pop()
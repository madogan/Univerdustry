from flask import Blueprint, jsonify, current_appfrom application import logger, scholaryauthor_bp = Blueprint("author_bp", __name__)@author_bp.route("/author/<str:author_name>")def get_author(author_name):    resd = {"status": "ok"}    logger.info(f'I am in get_author with {author_name}')    query_result = scholary.search_author(author_name)    logger.info(f'Query_result: {query_result}')    try:        author_info = next(query_result).fill()    except StopIteration:        logger.info(f'Author ({author_name}) not found.')        resd["status"] = "failure"        resd["failure_detail"] = "Author not found."        return resd, 404    if not author_info:        logger.info(f'Author ({author_name}) not found.')        resd["status"] = "failure"        resd["failure_detail"] = "Author not found."        return resd, 404    logger.info(f'\nAuthor({author_name}) found.\nAffiliation: '                f'{getattr(author_info, "affiliation", None)}')    # Parse to dictionary as suitable with database columns.    resd["author"] = {        "ident": author_info.id,        "name": author_info.name,        "email": getattr(author_info, "email", ""),        "affiliation": getattr(author_info, "affiliation", ""),        "cited_by": getattr(author_info, "citedby", 0),        "cites_per_year": getattr(author_info, "cites_per_year", {}),        "hindex": getattr(author_info, "hindex", 0),        "i10index": getattr(author_info, "i10index", 0),        "interests": getattr(author_info, "interests", []),        "url_picture": getattr(author_info, "url_picture",                               current_app.config["DEFAULT_PROFILE_IMAGE_URL"])    }    return jsonify(resd), 200@author_bp.route("/author/<str:author_name>/publications")def get_publications_of_author(author_name):    resd = {"status": "ok"}    logger.info(f'I am in get_author_and_publications with {author_name}')    query_result = scholary.search_author(author_name)    logger.info(f'Query_result: {query_result}')    try:        author_info = next(query_result).fill()    except StopIteration:        logger.info(f'Author ({author_name}) not found.')        resd["status"] = "failure"        resd["failure_detail"] = "Author not found."        return resd, 404    if not author_info:        logger.info(f'Author ({author_name}) not found.')        resd["status"] = "failure"        resd["failure_detail"] = "Author not found."        return resd, 404    logger.info(f'\nAuthor({author_name}) found.\nAffiliation: '                f'{getattr(author_info, "affiliation", None)}')    # Parse to dictionary as suitable with database columns.    resd["publications"] = list(author_info.publications)    return jsonify(resd), 200
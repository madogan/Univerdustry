from flask import Blueprint, current_app, requestfrom scholarly import search_authorfrom application import loggerfrom application.utils.decorators import json_responsebp_author = Blueprint("bp_author", __name__)@bp_author.route("/author", methods=["GET"])@json_responsedef get_author():    resd = {"status": "ok"}    author_name = request.json["author_name"]    logger.info(f'I am in get_author with {author_name}')    query_result = search_author(author_name)    logger.info(f'Query_result: {query_result}')    try:        author_info = next(query_result).fill()    except StopIteration:        logger.info(f'Author ({author_name}) not found.')        resd["status"] = "failure"        resd["failure_detail"] = "Author not found."        return resd, 404    if not author_info:        logger.info(f'Author ({author_name}) not found.')        resd["status"] = "failure"        resd["failure_detail"] = "Author not found."        return resd, 404    logger.info(f'\nAuthor({author_name}) found.\nAffiliation: '                f'{getattr(author_info, "affiliation", None)}')    # Parse to dictionary as suitable with database columns.    resd["author"] = {        "ident": author_info.id,        "name": author_info.name,        "email": getattr(author_info, "email", ""),        "affiliation": getattr(author_info, "affiliation", ""),        "cited_by": getattr(author_info, "citedby", 0),        "cites_per_year": getattr(author_info, "cites_per_year", {}),        "hindex": getattr(author_info, "hindex", 0),        "i10index": getattr(author_info, "i10index", 0),        "interests": getattr(author_info, "interests", []),        "url_picture": getattr(author_info, "url_picture",                               current_app.config["DEFAULT_PROFILE_IMAGE_URL"])    }    return resd, 200@bp_author.route("/author/publications", methods=["GET"])@json_responsedef get_publications_of_author():    resd = {"status": "ok", "result": None}    try:        author_name = request.json["author_name"]        query_result = search_author(author_name)        author_info = next(query_result).fill()        if not author_info:            logger.info(f'Author ({author_name}) not found.')            resd["status"] = "failure"            resd["failure_detail"] = "Author not found."            return resd, 404        logger.info(f'Author({author_name}) found.')        ctr = 1        result = list()        for pub in author_info.publications:            if ctr > 5:                break            logger.info(f'{ctr} pubs scraped.')            result.append(pub.fill().__dict__)            ctr += 1        logger.info(f'Scraping pubs finished. Count: {ctr}')        # Parse to dictionary as suitable with database columns.        resd["result"] = result    except Exception as e:        logger.exception(e)        resd["status"] = "failure"        resd["detail"] = str(e)    return resd, 200